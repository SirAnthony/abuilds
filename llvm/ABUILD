# ABUILD generated by mkpkg_generator.sh

pkgname=llvm
pkgver=3.4
pkgbuild=1
arch=("auto")
_gcc_ver=4.7.3
shortdesc="Low Level Virtual Machine"

tags=("develop sys-devel")

source=("http://llvm.org/releases/$pkgver/llvm-$pkgver.src.tar.gz"
	"http://llvm.org/releases/$pkgver/clang-$pkgver.src.tar.gz"
	"http://llvm.org/releases/$pkgver/clang-tools-extra-$pkgver.src.tar.gz"
	"http://llvm.org/releases/$pkgver/compiler-rt-$pkgver.src.tar.gz")

build_deps="libffi python ocaml python-sphinx"
pkglist="clang llvm_ocaml clang_analyzer clang_tools_extra"
adddep="perl"

fix_make() {
	# unfortunately ./configure won't listen to --mandir and the-like, so take
	# care of this.
	sed -e 's,^PROJ_docsdir.*,PROJ_docsdir := $(PROJ_prefix)/doc/'${pkgname}-${pkgver}, \
	    -e 's,^PROJ_mandir.*,PROJ_mandir := $(PROJ_prefix)/man/', \
	    -e 's,^PROJ_etcdir.*,PROJ_etcdir := /etc/llvm,' \
	    -e 's,^PROJ_libdir.*,PROJ_libdir := $(PROJ_prefix)/'lib${LIBDIRSUFFIX}/${pkgname}, \
	    -i Makefile.config.in || die "Makefile.config sed failed"
	
	sed -e "/ActiveLibDir = ActivePrefix/s/lib/lib${LIBDIRSUFFIX}\/${pkgname}/" \
	    -i tools/llvm-config/llvm-config.cpp || die "llvm-config sed failed"
	
	# Fixing rpath and CFLAGS
	sed -e 's,\$(RPATH) -Wl\,\$(\(ToolDir\|LibDir\)),$(RPATH) -Wl\,'/usr/lib${LIBDIRSUFFIX}/${pkgname}, \
	    -e '/OmitFramePointer/s/-fomit-frame-pointer//' \
	    -i Makefile.rules || die "rpath sed failed"

	sed -e "/NO_INSTALL = 1/s/^/#/" -i utils/FileCheck/Makefile \
	    || die "FileCheck Makefile sed failed"
}

build() {
	cd "$srcdir/$pkgname-$pkgver"

	# At the present, clang must reside inside the LLVM source code tree to build
	# See http://llvm.org/bugs/show_bug.cgi?id=4840	
	mv "$srcdir/clang-$pkgver" tools/clang
	mv "$srcdir/clang-tools-extra-$pkgver" tools/clang/tools/extra
	mv "$srcdir/compiler-rt-$pkgver" projects/compiler-rt

	fix_make
	burn_patches

	# Include location of libffi headers in CPPFLAGS
	export CPPFLAGS="$SLKCXXFLAGS $SLKCPPFLAGS $(pkg-config --cflags libffi)"

	_cxx_headers="/usr/include/c++/$_gcc_ver"
	if [[ ! -d $_cxx_headers ]]; then
		echo "Couldn't find the C++ headers, PKGBUILD needs fixing!"
		return 1
	fi

	if [ "$ARCH" = "x86_64" ] ; then
		CHOST=x86_64
	else
		CHOST=i686
	fi

	# Fix clang headers path
	sed -e "/PROJ_headers/s#lib/clang#lib${LIBDIRSUFFIX}/clang#" \
		-i $srcdir/llvm-$pkgver/tools/clang/lib/Headers/Makefile

	./configure \
		--prefix=/usr \
		--libdir=/usr/lib${LIBDIRSUFFIX}/llvm \
		--sysconfdir=/etc \
		--mandir=/usr/man \
		--enable-shared \
		--enable-libffi \
		--enable-targets=all \
		--enable-experimental-targets=R600 \
		--disable-expensive-checks \
		--disable-debug-runtime \
		--disable-assertions \
		--with-cxx-include-root=$_cxx_headers \
		--with-cxx-include-arch=$CHOST \
		--enable-optimized
		# --with-binutils-include=/usr/include \ # gold plugin
	

	make REQUIRES_RTTI=1 -j${numjobs}

	make -j${numjobs} -C docs -f Makefile.sphinx man
	make -j${numjobs} -C docs -f Makefile.sphinx html
	make -j${numjobs} -C tools/clang/docs -f Makefile.sphinx html
}


after_build() {

	cd "$srcdir/llvm-$pkgver"

       	# We move the clang directory out of the tree so it won't get installed and
	# then we bring it back in for the clang package
	mv tools/clang "$srcdir"

	# -j1 is due to race conditions during the installation of the OCaml bindings
	make -j1 DESTDIR="$pkgdir" install
	mv "$srcdir/clang" tools

	# OCaml bindings go to a separate package
	rm -rf "$srcdir"/{ocaml,ocamldoc}
	mv "$pkgdir"/usr/{lib${LIBDIRSUFFIX}/ocaml,doc/llvm-${pkgver}/ocamldoc} "$srcdir"

	# Remove duplicate files installed by the OCaml bindings
	#rm "$pkgdir"/usr/{lib${LIBDIRSUFFIX}/llvm/libllvm*,doc/llvm-${pkgver}/ocamldoc.tar.gz}

	# Fix permissions of static libs
	chmod -x "$pkgdir"/usr/lib${LIBDIRSUFFIX}/llvm/*.a

	# Get rid of example Hello transformation
	rm "$pkgdir"/usr/lib${LIBDIRSUFFIX}/llvm/*LLVMHello.*

	# Symlink LLVMgold.so into /usr/lib${LIBDIRSUFFIX}/bfd-plugins
	# (https://bugs.archlinux.org/task/28479)
	#install -d "$pkgdir/usr/lib${LIBDIRSUFFIX}/bfd-plugins"
	#ln -s ../LLVMgold.so "$pkgdir/usr/lib${LIBDIRSUFFIX}/bfd-plugins/LLVMgold.so"

	if [[ $ARCH == x86_64 ]]; then
	    # Needed for multilib (https://bugs.archlinux.org/task/29951)
	    # Header stubs are taken from Fedora
	    for _header in config llvm-config; do
		mv "$pkgdir/usr/include/llvm/Config/$_header"{,-64}.h
		cp "$filedir/llvm-Config-$_header.h" \
		"$pkgdir/usr/include/llvm/Config/$_header.h"
	    done
	fi

	# Install man pages
	install -d "$pkgdir/usr/man/man1"
	cp docs/_build/man/*.1 "$pkgdir/usr/man/man1/"

	# Install html docs
	cp -r docs/_build/html/* "$pkgdir/usr/doc/$pkgname-${pkgver}/html/"
	rm -r "$pkgdir/usr/doc/$pkgname-${pkgver}/html/_sources"

	install -Dm644 LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

llvm_ocaml() {
	pkgname=llvm-ocaml
	shortdesc="OCaml bindings for LLVM"
	adddep="ocaml llvm=${pkgver}"
}

llvm_ocaml_prep() {
	cd "$srcdir/llvm-$pkgver"

	install -d "$pkgdir"/{usr/lib${LIBDIRSUFFIX},usr/doc/llvm-${pkgver}}
	cp -r "$srcdir/ocaml" "$pkgdir/usr/lib${LIBDIRSUFFIX}"
	cp -r "$srcdir/ocamldoc" "$pkgdir/usr/doc/llvm-${pkgver}"
	
	( cd "$pkgdir"/usr/lib${LIBDIRSUFFIX}/ocaml/
	  for file in libllvm*.a; do
	    rm -f ${file}
	    ln -s /usr/lib/llvm/${file} ${file}
	  done
	)

	# Remove execute bit from static libraries
	#chmod -x "$pkgdir"/usr/lib${LIBDIRSUFFIX}/ocaml/libllvm*.a

	install -Dm644 LICENSE.TXT "$pkgdir/usr/share/licenses/llvm-ocaml/LICENSE"
}

clang() {
	pkgname=clang
	shortdesc="C language family frontend for LLVM"
	adddep="llvm=${pkgver} gcc=${_gcc_ver}"
}

clang_prep() {
	# Fix installation path for clang docs
	#sed -i 's:$(PROJ_prefix)/doc/llvm-${pkgver}:$(PROJ_prefix)/doc/clang-${pkgver}:' \
	#   "$srcdir/llvm-$pkgver/Makefile.config" 

	cd "$srcdir/llvm-$pkgver/tools/clang"
	make DESTDIR="$pkgdir" install

	if [ ! -z "$LIBDIRSUFFIX" ] ; then
	    cp -r $pkgdir/usr/{lib/*,lib$LIBDIRSUFFIX/}
	    rm -r $pkgdir/usr/lib/
	fi

	# Fix permissions of static libs
	chmod -x "$pkgdir"/usr/lib${LIBDIRSUFFIX}/llvm/*.a

	# Just move it. Why using sed?
	mv $pkgdir/usr/doc/llvm-${pkgver} $pkgdir/usr/doc/clang-${pkgver}

	# Install html docs
	cp -r docs/_build/html/* "$pkgdir/usr/doc/$pkgname-${pkgver}/html/"
	rm -r "$pkgdir/usr/doc/$pkgname-${pkgver}/html/_sources"
	install -Dm644 LICENSE.TXT "$pkgdir/usr/share/licenses/clang/LICENSE"
}

clang_analyzer() {
	pkgname=clang-analyzer
	shortdesc="A source code analysis framework"
	adddep="clang=${pkgver}"
}

clang_analyzer_prep() {
	cd "$srcdir/llvm-$pkgver/tools/clang"

	install -d "$pkgdir"/usr/{bin,lib${LIBDIRSUFFIX}/clang-analyzer}
	for _tool in scan-{build,view}; do
		cp -r tools/$_tool "$pkgdir/usr/lib${LIBDIRSUFFIX}/clang-analyzer/"
		ln -s /usr/lib${LIBDIRSUFFIX}/clang-analyzer/$_tool/$_tool "$pkgdir/usr/bin/"
	done

	# scan-build looks for clang within the same directory
	ln -s /usr/bin/clang "$pkgdir/usr/lib${LIBDIRSUFFIX}/clang-analyzer/scan-build/"

	# Relocate man page
	install -d "$pkgdir/usr/man/man1"
	mv "$pkgdir/usr/lib${LIBDIRSUFFIX}/clang-analyzer/scan-build/scan-build.1" \
	    "$pkgdir/usr/man/man1/"

	# Compile Python scripts
	python -m compileall "$pkgdir/usr/lib${LIBDIRSUFFIX}/clang-analyzer"
	python -O -m compileall "$pkgdir/usr/lib${LIBDIRSUFFIX}/clang-analyzer"

	install -Dm644 LICENSE.TXT "$pkgdir/usr/share/licenses/clang-analyzer/LICENSE"
}

clang_tools_extra() {
	pkgname=clang-tools-extra
	shortdesc="Extra tools built using Clang's tooling APIs"
	adddep="clang=${pkgver}"
}

clang_tools_extra_prep() {
	cd "$srcdir/llvm-$pkgver/tools/clang/tools/extra"

	make DESTDIR="$pkgdir" install

	# Fix permissions of static libs
	chmod -x "$pkgdir"/usr/lib$LIBDIRSUFFIX/llvm/*.a

	install -Dm644 LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}